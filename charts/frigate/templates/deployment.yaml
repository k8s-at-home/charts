apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "frigate.fullname" . }}
  labels:
{{ include "frigate.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 3
  strategy:
    type: {{ .Values.strategyType }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "frigate.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "frigate.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
        - name: config
          securityContext:
            readOnlyRootFilesystem: true
          image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
          imagePullPolicy: {{ .Values.initContainer.image.pullPolicy }}
          volumeMounts:
            - mountPath: /frigate-config
              name: configmap
            - mountPath: /masks
              name: masks
            - mountPath: /config
              name: config
              readOnly: false
            - mountPath: /media
              name: media
              readOnly: false
          command: ['sh', '-c']
          args:
            - cp /frigate-config/* /config;
              {{- if .Values.masksConfigMap }}
              cp /masks/* /config;
              {{- end }}

      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            privileged: true
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
            - name: rtmp
              containerPort: 1935
              protocol: TCP
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end }}
          {{- if .Values.probes.startup.enabled }}
          startupProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
          {{- end }}
          env:
            {{- if .Values.timezone }}
            - name: TZ
              value: "{{ .Values.timezone }}"
            {{- end }}
            - name: FRIGATE_RTSP_PASSWORD
              value: "{{ .Values.rtspPassword }}"
          envFrom:
          {{- range .Values.extraSecretForEnvFrom }}
            - secretRef:
                name: {{ . }}
          {{- end }}
          volumeMounts:
            {{- if .Values.coral.enabled }}
            - mountPath: /dev/bus/usb
              name: usb
            {{- end }}
            - mountPath: /config
              name: config
            - mountPath: /data
              name: data
            - mountPath: /dev/shm
              name: dshm
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: config
          emptyDir: {}
        - name: configmap
          configMap:
            name: {{ template "frigate.fullname" . }}
        - name: masks
          {{- if .Values.masksConfigMap }}
          configMap:
            name: {{ .Values.masksConfigMap }}
          {{- else }}
          emptyDir:
            {}
          {{- end }}
        {{- if .Values.coral.enabled }}
        - name: usb
          hostPath:
            path: {{ .Values.coral.hostPath }}
        {{- end }}
        - name: data
        {{- if .Values.persistence.data.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.persistence.data.existingClaim }}{{ .Values.persistence.data.existingClaim }}{{- else }}{{ template "frigate.fullname" . }}-data{{- end }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: {{ .Values.shmSize }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
