# Default values for frigate.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# upgrade strategy type (e.g. Recreate or RollingUpdate)
strategyType: Recreate

image:
  repository: blakeblackshear/frigate
  tag: 0.6.0
  pullPolicy: IfNotPresent

rtspPassword: password

# secret name containing environment variables for frigate
extraSecretForEnvFrom: []

coral:
  enabled: false
  hostPath: /dev/bus/usb

# Specify image that generates the config folder containing the Frigate config file, masks (if specified), etc.
initContainer:
  image:
    repository: busybox
    tag: latest
    pullPolicy: Always

# reference to configMap that contains the binary data of the masks to be copied into the container
# this requires that generateConfigFolder.enabled = true
# see https://github.com/blakeblackshear/frigate#masks-and-limiting-detection-to-a-certain-area for more info
masksConfigMap: {}

shmSize: 1Gi

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# frigate configuration - see https://github.com/blakeblackshear/frigate/blob/master/config/config.yml for example
config: |
  web_port: 5000

  mqtt:
    host: test.mosquitto.org
    topic_prefix: frigate
    # client_id: frigate # Optional -- set to override default client id of 'frigate' if running multiple instances
    # user: username # Optional
    #################
    ## Environment variables that begin with 'FRIGATE_' may be referenced in {}.
    ##   password: '{FRIGATE_MQTT_PASSWORD}'
    #################
    # password: password # Optional

  #################
  # Default ffmpeg args. Optional and can be overwritten per camera.
  # Should work with most RTSP cameras that send h264 video
  # Built from the properties below with:
  # "ffmpeg" + global_args + input_args + "-i" + input + output_args
  #################
  # ffmpeg:
  #   global_args:
  #     - -hide_banner
  #     - -loglevel
  #     - panic
  #   hwaccel_args: []
  #   input_args:
  #     - -avoid_negative_ts
  #     - make_zero
  #     - -fflags
  #     - nobuffer
  #     - -flags
  #     - low_delay
  #     - -strict
  #     - experimental
  #     - -fflags
  #     - +genpts+discardcorrupt
  #     - -vsync
  #     - drop
  #     - -rtsp_transport
  #     - tcp
  #     - -stimeout
  #     - '5000000'
  #     - -use_wallclock_as_timestamps
  #     - '1'
  #   output_args:
  #     - -f
  #     - rawvideo
  #     - -pix_fmt
  #     - rgb24

  ####################
  # Global object configuration. Applies to all cameras
  # unless overridden at the camera levels.
  # Keys must be valid labels. By default, the model uses coco (https://dl.google.com/coral/canned_models/coco_labels.txt).
  # All labels from the model are reported over MQTT. These values are used to filter out false positives.
  # min_area (optional): minimum width*height of the bounding box for the detected person
  # max_area (optional): maximum width*height of the bounding box for the detected person
  # threshold (optional): The minimum decimal percentage (50% hit = 0.5) for the confidence from tensorflow
  ####################
  objects:
    track:
      - person
      - car
      - truck
    filters:
      person:
        min_area: 5000
        max_area: 100000
        threshold: 0.5

  cameras:
    back:
      ffmpeg:
        ################
        # Source passed to ffmpeg after the -i parameter. Supports anything compatible with OpenCV and FFmpeg.
        # Environment variables that begin with 'FRIGATE_' may be referenced in {}
        ################
        input: rtsp://viewer:{FRIGATE_RTSP_PASSWORD}@10.0.10.10:554/cam/realmonitor?channel=1&subtype=2
        #################
        # These values will override default values for just this camera
        #################
        # global_args: []
        # hwaccel_args: []
        # input_args: []
        # output_args: []

      ################
      ## Optionally specify the resolution of the video feed. Frigate will try to auto detect if not specified
      ################
      # height: 1280
      # width: 720

      ################
      ## Optional mask. Must be the same aspect ratio as your video feed.
      ##
      ## The mask works by looking at the bottom center of the bounding box for the detected
      ## person in the image. If that pixel in the mask is a black pixel, it ignores it as a
      ## false positive. In my mask, the grass and driveway visible from my backdoor camera
      ## are white. The garage doors, sky, and trees (anywhere it would be impossible for a
      ## person to stand) are black.
      ##
      ## Masked areas are also ignored for motion detection.
      ################
      # mask: back-mask.bmp

      ################
      # Allows you to limit the framerate within frigate for cameras that do not support
      # custom framerates. A value of 1 tells frigate to look at every frame, 2 every 2nd frame,
      # 3 every 3rd frame, etc.
      ################
      take_frame: 1

      ################
      # The expected framerate for the camera. Frigate will try and ensure it maintains this framerate
      # by dropping frames as necessary. Setting this lower than the actual framerate will allow frigate
      # to process every frame at the expense of realtime processing.
      ################
      fps: 5

      ################
      # Configuration for the snapshots in the debug view and mqtt
      ################
      snapshots:
        show_timestamp: True

      ################
      # Camera level object config. This config is merged with the global config above.
      ################
      objects:
        track:
          - person
        filters:
          person:
            min_area: 5000
            max_area: 100000
            threshold: 0.5


# Probes configuration
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 30
    failureThreshold: 5
    timeoutSeconds: 10
  readiness:
    enabled: true
    initialDelaySeconds: 30
    failureThreshold: 5
    timeoutSeconds: 10
  startup:
    enabled: false
    failureThreshold: 30
    periodSeconds: 10

service:
  type: ClusterIP
  port: 5000
  ## Specify the nodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  # nodePort:
  ## Provide any additional annotations which may be required. This can be used to
  ## set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  annotations: {}
  labels: {}
  ## Use loadBalancerIP to request a specific static IP,
  ## otherwise leave blank
  ##
  loadBalancerIP:
  # loadBalancerSourceRanges: []
  ## Set the externalTrafficPolicy in the Service to either Cluster or Local
  # externalTrafficPolicy: Cluster

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

podAnnotations: {}
