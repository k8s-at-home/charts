# type: options are statefulset or deployment
controllerType: deployment
# Set annotations on the deployment/statefulset
controllerAnnotations: {}
# Set labels on the deployment/statefulset
controllerLabels: {}

# Set annotations on the pod
podAnnotations: {}

env: {}

initContainers: []

additionalContainers: []

# Probes configuration
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 30
    failureThreshold: 5
    timeoutSeconds: 10
  readiness:
    enabled: true
    initialDelaySeconds: 30
    failureThreshold: 5
    timeoutSeconds: 10
  startup:
    enabled: false
    initialDelaySeconds: 5
    failureThreshold: 30
    periodSeconds: 10

service:
  enabled: true
  type: ClusterIP
  # Specify the default port information
  port:
    port: ""
    name: http
    protocol: TCP
    targetPort: http
    ## Specify the nodePort value for the LoadBalancer and NodePort service types.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    # nodePort:
  additionalPorts: []

  ## Provide any additional annotations which may be required. This can be used to
  ## set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  annotations: {}
  labels: {}

  additionalServices: []
  # - enabled: false
  #   nameSuffix: api
  #   type: ClusterIP
  #   # Specify the default port information
  #   port:
  #     port: ""
  #     name: http
  #     protocol: TCP
  #     targetPort: http
  #     # nodePort:
  #   additionalPorts: []
  #   annotations: {}
  #   labels: {}

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          # Ignored if not kubeVersion >= 1.14-0
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  additionalIngresses: []
  # - enabled: false
  #   nameSuffix: "api"
  #   annotations: {}
  #   # kubernetes.io/ingress.class: nginx
  #   # kubernetes.io/tls-acme: "true"
  #   labels: {}
  #   hosts:
  #     - host: chart-example.local
  #       paths:
  #         - path: /api
  #          # Ignored if not kubeVersion >= 1.14-0
  #          pathType: Prefix
  #   tls: []
  #   #  - secretName: chart-example-tls
  #   #    hosts:
  #   #      - chart-example.local

persistence:
  config:
    enabled: false
    mountPath: /config
    ## configuration data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    ##
    ## If you want to reuse an existing claim, you can pass the name of the PVC using
    ## the existingClaim variable
    # existingClaim: your-claim
    # subPath: some-subpath
    accessMode: ReadWriteOnce
    size: 1Gi
    ## Do not delete the pvc upon helm uninstall
    skipuninstall: false

  # Create an emptyDir volume to share between all containers
  shared:
    enabled: false
    emptyDir: true
    mountPath: /shared

additionalVolumes: []

additionalVolumeMounts: []

addons:
  vpn:
    enabled: false

    # VPN type: options are openvpn or wireguard
    type: openvpn

    # OpenVPN specific configuration
    openvpn:
      image:
        repository: dperson/openvpn-client
        tag: latest

      # Credentials to connect to the VPN Service (used with -a)
      auth:  # "user;password"
      # OR specify an existing secret that contains the credentials. Credentials should be stored
      # under the VPN_AUTH key
      authSecret:  # my-vpn-secret

    # OpenVPN specific configuration
    wireguard:
      image:
        repository: linuxserver/wireguard
        tag: version-v1.0.20200827

    imagePullPolicy: IfNotPresent

    # All variables specified here will be added to the vpn sidecar container
    # See the documentation of the VPN image for all config values
    env: {}
    # TZ: UTC

    # Provide a customized vpn configuration file to be used by the VPN.
    configFile:  # |-
      # Some Example Config
      # remote greatvpnhost.com 8888
      # auth-user-pass
      # Cipher AES

    # Provide custom up/down scripts that can be used by the vpnConf
    scripts:
      up:  # |-
        # #!/bin/bash
        # echo "connected" > /shared/vpnstatus
      down:  # |-
        # #!/bin/bash
        # echo "disconnected" > /shared/vpnstatus

    additionalVolumeMounts: []

    # Optionally specify a livenessProbe, e.g. to check if the connection is still
    # being protected by the VPN
    livenessProbe: {}
    # exec:
    #    command:
    #      - sh
    #      - -c
    #      - if [ $(curl -s https://ipinfo.io/country) == 'US' ]; then exit 0; else exit $?; fi
    #  initialDelaySeconds: 30
    #  periodSeconds: 60
    #  failureThreshold: 1

    # If set to true, will deploy a network policy that blocks all outbound
    # traffic except traffic specified as allowed
    networkPolicy:
      enabled: false

      # The egress configuration for your network policy, All outbound traffic
      # From the pod will be blocked unless specified here. Your cluster must
      # have a CNI that supports network policies (Canal, Calico, etc...)
      # https://kubernetes.io/docs/concepts/services-networking/network-policies/
      # https://github.com/ahmetb/kubernetes-network-policy-recipes
      egress:
        # - to:
        #   - ipBlock:
        #       cidr: 0.0.0.0/0
        #   ports:
        #   - port: 53
        #     protocol: UDP
        #   - port: 53
        #     protocol: TCP
