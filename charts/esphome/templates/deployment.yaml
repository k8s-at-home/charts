apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "esphome.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "esphome.name" . }}
    helm.sh/chart: {{ include "esphome.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    type: {{ .Values.strategyType }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "esphome.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "esphome.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      {{- if .Values.hostNetwork }}
      hostNetwork: {{ .Values.hostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      initContainers:
      {{- if .Values.git.enabled }}
      - name: git-sync
        image: "{{ .Values.git.image.repository }}:{{ .Values.git.image.tag }}"
        imagePullPolicy: {{ .Values.git.image.pullPolicy }}
        {{- if .Values.git.command }}
        command:
          {{- range .Values.git.command }}
          - {{ . | quote }}
          {{- end }}
        {{- else }}
        command: ["/bin/sh", "-c"]
        args:
        - set -e;
          if [ -d "{{ .Values.git.syncPath }}/.git" ];
          then
            git -C "{{ .Values.git.syncPath }}" pull || true;
          else
            if [ "$(ls -A {{ .Values.git.syncPath }})" ]; 
            then
              git clone --depth 2 "{{ .Values.git.repo }}" /tmp/repo;
              cp -rf /tmp/repo/.git "{{ .Values.git.syncPath }}";
              cd "{{ .Values.git.syncPath }}";
              git checkout -f;
            else
              git clone --depth 2 "{{ .Values.git.repo }}" "{{ .Values.git.syncPath }}";
            fi;
          fi;
          if [ -f "{{ .Values.git.keyPath }}/git-crypt-key" ];
          then
            cd {{ .Values.git.syncPath }};
            git-crypt unlock "{{ .Values.git.keyPath }}/git-crypt-key";
          fi;
        {{- end }}
        volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: {{ .Values.git.keyPath }}
          name: git-secret
        {{- if .Values.extraVolumeMounts }}{{ toYaml .Values.extraVolumeMounts | trim | nindent 8 }}{{ end }}
        {{- if .Values.usePodSecurityContext }}
        securityContext:
          runAsUser: {{ default 0 .Values.runAsUser }}
        {{- if and (.Values.runAsUser) (.Values.fsGroup) }}
        {{- if not (eq .Values.runAsUser 0.0) }}
          fsGroup: {{ .Values.fsGroup }}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- end }}              
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: api
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- range .Values.service.additionalPorts }}
            - name: {{ .name }}
              containerPort: {{ .targetPort }}
          {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: /ping
              port: api
              scheme: {{ .Values.probes.liveness.scheme }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: /ping
              port: api
              scheme: {{ .Values.probes.readiness.scheme }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end }}
          {{- if .Values.probes.startup.enabled }}
          startupProbe:
            httpGet:
              path: /ping
              port: api
              scheme: {{ .Values.probes.startup.scheme }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
          {{- end }}
          env:
            {{- range $key, $value := .Values.extraEnv }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $name, $opts := .Values.extraEnvSecrets }}
            - name: {{ $name }}
              valueFrom:
                secretKeyRef:
                  name: {{ $opts.secret }}
                  key: {{ $opts.key }}
            {{- end }}
          envFrom:
          {{- range .Values.extraSecretForEnvFrom }}
            - secretRef:
                name: {{ . }}
          {{- end }}
          volumeMounts:
          - mountPath: /config
            name: config
          {{- range .Values.hostMounts }}
          {{- if .mountPath }}
          - mountPath: {{ .mountPath }}
          {{- else }}
          - mountPath: {{ .hostPath }}
          {{- end }}
            name: {{ .name }}
          {{- end }}
          {{- if .Values.extraVolumeMounts }}{{ toYaml .Values.extraVolumeMounts | trim | nindent 10 }}{{ end }}
          {{- if .Values.usePodSecurityContext }}
          securityContext:
            runAsUser: {{ default 0 .Values.runAsUser }}
          {{- if and (.Values.runAsUser) (.Values.fsGroup) }}
          {{- if not (eq .Values.runAsUser 0.0) }}
            fsGroup: {{ .Values.fsGroup }}
          {{- end }}
          {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- if .Values.hostMounts }}
          securityContext:
            privileged: true
          {{- end }}
      volumes:
      - name: config
      {{- if .Values.persistence.enabled }}
        {{- if .Values.persistence.hostPath }}
        hostPath:
          path: {{.Values.persistence.hostPath}}
          type: Directory
        {{- else }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ template "esphome.fullname" . }}{{- end }}
        {{- end }}
      {{- else }}
        emptyDir: {}
      {{ end }}
      {{- range .Values.hostMounts }}
      - name: {{ .name }}
        hostPath:
          path: {{.hostPath}}
          {{- if .type }}
          type: {{ .type }}
          {{- end }}
      {{- end }}
      {{- if .Values.git.enabled }}
      - name: git-secret
        secret:
          defaultMode: 256
          secretName: {{ .Values.git.secret }}
          optional: true
      {{ end }}      
      {{- if .Values.extraVolumes  }}{{ toYaml .Values.extraVolumes | trim | nindent 6 }}{{ end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
