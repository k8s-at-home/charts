#
# IMPORTANT NOTE
#
# This chart inherits from our common library chart. You can check the default values/options here:
# https://github.com/k8s-at-home/library-charts/tree/main/charts/stable/common/values.yaml
#

image:
  # -- image repository
  repository: spx01/blocky
  # -- image tag
  tag: v0.15
  # -- image pull policy
  pullPolicy: IfNotPresent

controller:
  # -- Set the controller upgrade strategy
  strategy: RollingUpdate
  # -- (int) Number of pods to load balance between
  replicas: 1

# -- environment variables. See [image docs](https://0xerr0r.github.io/blocky/installation/#run-with-docker) for more details.
# @default -- See below
env:
  # -- Set the container timezone
  TZ: UTC

# -- Configures service settings for the chart.
# @default -- See values.yaml
service:
  main:
    ports:
      http:
        port: 4000
  dns-tcp:
    enabled: false
    type: ClusterIP
    externalTrafficPolicy: Local
    ports:
      dns-tcp:
        enabled: true
        port: 53
        protocol: TCP
        targetPort: 53
  dns-udp:
    enabled: false
    type: ClusterIP
    externalTrafficPolicy: Local
    ports:
      dns-udp:
        enabled: true
        port: 53
        protocol: UDP
        targetPort: 53

# -- Configure persistence settings for the chart under this key.
# @default -- See values.yaml
persistence:
  logs:
    enabled: false
    mountPath: /logs

metrics:
  # -- Enable and configure a Prometheus serviceMonitor for the chart under this key.
  # @default -- See values.yaml
  enabled: false
  serviceMonitor:
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
  # -- Enable and configure Prometheus Rules for the chart under this key.
  # @default -- See values.yaml
  prometheusRule:
    enabled: false
    labels: {}
    # -- Configure additionial rules for the chart under this key.
    # @default -- See prometheusrules.yaml
    rules: []
      # - alert: BlockyDisabled
      #   annotations:
      #     description: Blocky's ad blocking has been disabled for 15min.
      #       Please re-enable protection.
      #     summary: Blocky is disabled.
      #   expr: |
      #     blocky_blocking_enabled == 0
      #   for: 15m
      #   labels:
      #     severity: critical

# -- Full list of options https://github.com/0xERR0R/blocky/blob/master/docs/config.yml
# @default -- see URL to default config
configmap:
  # -- If set to 'true', the configuration will be read from these values.
  enabled: false
  config: |
    upstream:
      # these external DNS resolvers will be used. Blocky picks 2 random resolvers from the list for each query
      # format for resolver: [net:]host:[port][/path]. net could be empty (default, shortcut for tcp+udp), tcp+udp, tcp, udp, tcp-tls or https (DoH). If port is empty, default port will be used (53 for udp and tcp, 853 for tcp-tls, 443 for https (Doh))
      externalResolvers:
        - 46.182.19.48
        - 80.241.218.68
        - tcp-tls:fdns1.dismail.de:853
        - https://dns.digitale-gesellschaft.ch/dns-query

    # optional: custom IP address for domain name (with all sub-domains)
    # example: query "printer.lan" or "my.printer.lan" will return 192.168.178.3
    customDNS:
      mapping:
        printer.lan: 192.168.178.3

    # optional: definition, which DNS resolver(s) should be used for queries to the domain (with all sub-domains). Multiple resolvers must be separated by comma
    # Example: Query client.fritz.box will ask DNS server 192.168.178.1. This is necessary for local network, to resolve clients by host name
    conditional:
      mapping:
        fritz.box: udp:192.168.178.1
        lan.net: udp:192.168.178.1,udp:192.168.178.2

    # optional: use black and white lists to block queries (for example ads, trackers, adult pages etc.)
    blocking:
      # definition of blacklist groups. Can be external link (http/https) or local file
      blackLists:
        ads:
          - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
          - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
          - https://mirror1.malwaredomains.com/files/justdomains
          - http://sysctl.org/cameleon/hosts
          - https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist
          - https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
        special:
          - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews/hosts
      # definition of whitelist groups. Attention: if the same group has black and whitelists, whitelists will be used to disable particular blacklist entries. If a group has only whitelist entries -> this means only domains from this list are allowed, all other domains will be blocked
      whiteLists:
        ads:
          - whitelist.txt
      # definition: which groups should be applied for which client
      clientGroupsBlock:
        # default will be used, if no special definition for a client name exists
        default:
          - ads
          - special
        # use client name (with wildcard support: * - sequence of any characters, [0-9] - range)
        # or single ip address / client subnet as CIDR notation
        laptop*:
          - ads
        192.168.178.1/24:
          - special
      # which response will be sent, if query is blocked:
      # zeroIp: 0.0.0.0 will be returned (default)
      # nxDomain: return NXDOMAIN as return code
      # comma separated list of destination IP adresses (for example: 192.100.100.15, 2001:0db8:85a3:08d3:1319:8a2e:0370:7344). Should contain ipv4 and ipv6 to cover all query types. Useful with running web server on this address to display the "blocked" page.
      blockType: zeroIp
      # optional: automatically list refresh period in minutes. Default: 4h.
      # Negative value -> deactivate automatically refresh.
      # 0 value -> use default
      refreshPeriod: 0

    # optional: configuration for caching of DNS responses
    caching:
      # amount in minutes, how long a response must be cached (min value).
      # If <=0, use response's TTL, if >0 use this value, if TTL is smaller
      # Default: 0
      minTime: 5
      # amount in minutes, how long a response must be cached (max value).
      # If <0, do not cache responses
      # If 0, use TTL
      # If > 0, use this value, if TTL is greater
      # Default: 0
      maxTime: -1
      # if true, will preload DNS results for often used queries (names queried more than 5 times in a 2 hour time window)
      # this improves the response time for often used queries, but significantly increases external traffic
      # default: false
      prefetching: true

    # optional: configuration of client name resolution
    clientLookup:
      # optional: this DNS resolver will be used to perform reverse DNS lookup (typically local router)
      upstream: udp:192.168.178.1
      # optional: some routers return multiple names for client (host name and user defined name). Define which single name should be used.
      # Example: take second name if present, if not take first name
      singleNameOrder:
        - 2
        - 1
      # optional: custom mapping of client name to IP addresses. Useful if reverse DNS does not work properly or just to have custom client names.
      clients:
        laptop:
          - 192.168.178.29

    # optional: configuration for prometheus metrics endpoint
    # prometheus:
    #   # enabled if true
    #   enable: true
    #   # url path, optional (default '/metrics')
    #   path: /metrics

    # optional: write query information (question, answer, client, duration etc) to daily csv file
    # queryLog:
    #   # directory (should be mounted as volume in docker)
    #   dir: /logs
    #   # if true, write one file per client. Writes all queries to single file otherwise
    #   perClient: true
    #   # if > 0, deletes log files which are older than ... days
    #   logRetentionDays: 7

    # optional: DNS listener port and bind ip address, default 53 (UDP and TCP). Example: 53, :53, 127.0.0.1:53
    port: 53
    # optional: HTTP listener port, default 0 = no http listener. If > 0, will be used for prometheus metrics, pprof, REST API, DoH ...
    httpPort: 4000
    # optional: HTTPS listener port, default 0 = no http listener. If > 0, will be used for prometheus metrics, pprof, REST API, DoH...
    #httpsPort: 443
    # mandatory, if https port > 0: path to cert and key file for SSL encryption
    #httpsCertFile: server.crt
    #httpsKeyFile: server.key
    # optional: use this DNS server to resolve blacklist urls and upstream DNS servers (DOH). Useful if no DNS resolver is configured and blocky needs to resolve a host name. Format net:IP:port, net must be udp or tcp
    bootstrapDns: tcp:1.1.1.1
    # optional: Log level (one from debug, info, warn, error). Default: info
    logLevel: info
    # optional: Log format (text or json). Default: text
    logFormat: text
