{{/* Make sure all variables are set properly */}}
{{- include "common.values.setup" . }}

{{/* Determine the configMap hash */}}
{{- define "frigate.configMapHash" -}}
  {{- if .Values.configmap.config.existingConfigMap -}}
    {{- $configMap := (lookup "v1" "ConfigMap" .Release.Namespace .Values.configmap.config.existingConfigMap ) -}}
    {{- if $configMap -}}
      {{- index $configMap "data" "config.yml" | toYaml | sha256sum -}}
    {{- end -}}
  {{- else -}}
    {{ .Values.configmap.config.data | toYaml | sha256sum }}
  {{- end -}}
{{- end -}}

{{/* Determine the configMap name */}}
{{- define "frigate.configMapName" -}}
  {{- .Values.configmap.config.existingConfigMap | default (printf "%v-config" (include "common.names.fullname" .)) -}}
{{- end -}}

{{/* Append the hardcoded settings */}}
{{- define "frigate.harcodedValues" -}}
  {{- if .Values.configmap.config.enabled }}
  {{/* merge frigate specific annotations with podAnnotations*/}}
  {{- if (include "frigate.configMapHash" .) }}
  podAnnotations:
    configmap/checksum: "{{ include "frigate.configMapHash" . }}"
  {{- end }}

  {{/* Append the configMap volume to the volumes */}}
  persistence:
    config:
      enabled: true
      type: "configMap"
      name: "{{ include "frigate.configMapName" . }}"
      mountPath: "/config/config.yml"
      subPath: "config.yml"
  {{- end }}
{{- end -}}
{{- $_ := mergeOverwrite .Values (include "frigate.harcodedValues" . | fromYaml) -}}

{{/* Render the templates */}}
{{ include "common.all" . }}
