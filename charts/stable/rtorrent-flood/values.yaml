#
# IMPORTANT NOTE
#
# This chart inherits from our common library chart. You can check the default values/options here:
# https://github.com/k8s-at-home/library-charts/tree/main/charts/stable/common/values.yaml
#

# # Use an initContainer to delete the rtorrent.lock file when the pod starts
# # this is only required if `session.use_lock.set = no` is NOT set
# initContainers:
# - name: remove-session-lock
#   image: busybox
#   command: ["sh", "-c", "rm -rf /config/.local/share/rtorrent/.session/rtorrent.lock"]
#   volumeMounts:
#   - name: config
#     mountPath: /config

image:
  repository: jesec/rtorrent-flood
  pullPolicy: IfNotPresent
  tag: latest

strategy:
  type: Recreate

env:
  # TZ:
  HOME: "/config"

args:
- "--port 3000"
- "--allowedpath /downloads"

service:
  port:
    port: 3000
  additionalServices:
  - enabled: true
    nameSuffix: bittorrent
    type: ClusterIP
    port:
      port: 6881
      name: bittorrent
      protocol: TCP
      targetPort: 6881

ingress:
  enabled: false

persistence:
  config:
    enabled: false
    emptyDir:
      enabled: false

  downloads:
    enabled: false
    emptyDir:
      enabled: false
    ## Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    # storageClass: "-"
    # accessMode: ReadWriteOnce
    # size: 1Gi
    ## Do not delete the pvc upon helm uninstall
    # skipuninstall: false
    # existingClaim: ""

# -- Minimal configuration provided from https://github.com/jesec/rtorrent/blob/master/doc/rtorrent.rc
# @default -- see URL to default config
config: |
  session.use_lock.set = no
  method.insert = cfg.basedir,  private|const|string, (cat,(fs.homedir),"/.local/share/rtorrent/")
  method.insert = cfg.download, private|const|string, (cat,"/downloads/","download/")
  method.insert = cfg.logs,     private|const|string, (cat,(cfg.download),"log/")
  method.insert = cfg.logfile,  private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")
  method.insert = cfg.session,  private|const|string, (cat,(cfg.basedir),".session/")
  method.insert = cfg.watch,    private|const|string, (cat,(cfg.download),"watch/")
  fs.mkdir.recursive = (cat,(cfg.basedir))
  fs.mkdir = (cat,(cfg.download))
  fs.mkdir = (cat,(cfg.logs))
  fs.mkdir = (cat,(cfg.session))
  fs.mkdir = (cat,(cfg.watch))
  fs.mkdir = (cat,(cfg.watch),"/load")
  fs.mkdir = (cat,(cfg.watch),"/start")
  schedule2 = watch_load, 11, 10, ((load.verbose, (cat, (cfg.watch), "load/*.torrent")))
  schedule2 = watch_start, 10, 10, ((load.start_verbose, (cat, (cfg.watch), "start/*.torrent")))
  dht.add_bootstrap = dht.transmissionbt.com:6881
  dht.add_bootstrap = dht.libtorrent.org:25401
  throttle.max_uploads.set = 100
  throttle.max_uploads.global.set = 250
  throttle.min_peers.normal.set = 20
  throttle.max_peers.normal.set = 60
  throttle.min_peers.seed.set = 30
  throttle.max_peers.seed.set = 80
  trackers.numwant.set = 80
  network.port_range.set = 6881-6881
  network.max_open_files.set = 600
  network.max_open_sockets.set = 300
  pieces.memory.max.set = 1800M
  session.path.set = (cat, (cfg.session))
  directory.default.set = (cat, (cfg.download))
  log.execute = (cat, (cfg.logs), "execute.log")
  encoding.add = utf8
  system.daemon.set = true
  system.umask.set = 0002
  system.cwd.set = (directory.default)
  network.http.max_open.set = 50
  network.http.dns_cache_timeout.set = 25
  network.scgi.open_local = (cat,(cfg.basedir),rtorrent.sock)
  print = (cat, "Logging to ", (cfg.logfile))
  log.open_file = "log", (cfg.logfile)
  log.add_output = "info", "log"
